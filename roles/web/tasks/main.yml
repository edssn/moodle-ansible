# # Php-fpm
- name: Update all packages
  ansible.builtin.dnf:
    name: "*"
    state: latest
    update_cache: yes

- name: Import remi GPG key.
  rpm_key:
    key: "https://rpms.remirepo.net/RPM-GPG-KEY-remi2018"
    state: present

- name: Install PHP prerequisite Packages
  ansible.builtin.package:
    name: 
      - epel-release
      - nfs-utils
      - https://rpms.remirepo.net/enterprise/remi-release-8.rpm
    state: latest

- name: Reset php module
  ansible.builtin.command: dnf module reset php -y
  args:
    warn: false

- name: Reset php Remi Repo
  ansible.builtin.command: dnf module enable php:remi-7.4 -y
  args:
    warn: false

- name: Update all packages
  ansible.builtin.dnf:
    name: "*"
    state: latest

- name: Install Php Modules 
  ansible.builtin.package:
    name: 
      - php
      - php-iconv
      - php-mbstring
      - php-fpm
      - php-curl
      - php-tokenizer
      - php-xmlrpc
      - php-soap
      - php-ctype
      - php-zip
      - php-simplexml
      - php-spl
      - php-pcre
      - php-dom
      - php-intl
      - php-json
      - php-xmlreader
      - php-ldap
      - php-redis
      - php-memcached
      - php-opcache
      - php-mysqli
      - php-xmlrpc
      - php-gd
      - php-sodium

- name: Copy php-fpm config file  
  ansible.builtin.copy:  
    src: www.conf  
    dest: /etc/php-fpm.d/www.conf
    owner: root
    group: root
    mode: '0644'
    force: true

- name: Replace max_input_vars in php.ini
  ansible.builtin.replace:
    path: /etc/php.ini
    regexp: '^;*max_input_vars.*'
    replace: 'max_input_vars = 5000'

- name: Enable php-fpm service
  ansible.builtin.service:
    enabled: true
    name: php-fpm

- name: Start php-fpm service
  ansible.builtin.service:
    name: php-fpm
    state: started
    

# Nginx
- name: Generate Diffie-Hellman parameters with the default size (4096 bits)
  community.crypto.openssl_dhparam:
    path: /etc/pki/tls/certs/dhparam.pem
    size: 2048

- name: Install Nginx
  ansible.builtin.package:
    name: nginx
    state: latest

- name: Create snippets dir
  ansible.builtin.file:
    path: /etc/nginx/snippets
    state: directory
    owner: root
    group: root
    mode: '0755'    

- name: Copy nginx config file  
  ansible.builtin.copy:  
    src: nginx.conf  
    dest: /etc/nginx/nginx.conf
    owner: root
    group: root
    mode: '0644'
    force: true

- name: Copy moodle config file  
  ansible.builtin.copy:  
    src: moodle.conf  
    dest: /etc/nginx/conf.d/moodle.conf
    owner: root
    group: root
    mode: '0644'
    force: true

- name: Copy php-fpm nginx config file  
  ansible.builtin.copy:  
    src: php-fpm.conf  
    dest: /etc/nginx/conf.d/php-fpm.conf
    owner: root
    group: root
    mode: '0644'
    force: true

- name: Copy headers config file  
  ansible.builtin.copy:  
    src: headers.conf  
    dest: /etc/nginx/snippets/headers.conf
    owner: root
    group: root
    mode: '0644'
    force: true

- name: Copy letsencrypt config file  
  ansible.builtin.copy:  
    src: letsencrypt.conf  
    dest: /etc/nginx/snippets/letsencrypt.conf
    owner: root
    group: root
    mode: '0644'
    force: true
  
- name: Copy ssl config file  
  ansible.builtin.copy:  
    src: ssl.conf  
    dest: /etc/nginx/snippets/ssl.conf
    owner: root
    group: root
    mode: '0644'
    force: true

- name: Enable nginx service
  ansible.builtin.service:
    enabled: true
    name: nginx

- name: Start nginx service
  ansible.builtin.service:
    name: nginx
    state: started


# Download Moodle
- name: Download moodle
  ansible.builtin.get_url:
    url: https://download.moodle.org/download.php/direct/stable401/moodle-latest-401.tgz
    dest: /var/www/moodle.tgz
    mode: '0440'

- name: Extract moodle.tgz
  ansible.builtin.unarchive:
    src: /var/www/moodle.tgz
    dest: /var/www
    owner: root
    group: root
    remote_src: yes

- name: Create moodledata dir
  ansible.builtin.file:
    path: /var/www/moodledata
    state: directory
    owner: nginx
    group: nginx
    mode: '0700'  